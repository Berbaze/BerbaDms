@page
@model IndexModel
@{
    ViewData["Title"] = "Chat";
}
<style>
    html, body {
        height: 100%;
        margin: 0;
        padding: 0;
        background: #23272a;
        width: 100vw;
        box-sizing: border-box;
    }

    body {
        min-height: 100vh;
        min-width: 100vw;
        overflow: hidden;
    }

    .chat-container {
        position: fixed; /* oder: absolute */
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        width: 100vw;
        height: 100vh;
        display: flex;
        background: #23272a;
        border: none;
        border-radius: 0;
        margin: 0;
        padding: 0;
        box-shadow: none;
        z-index: 0;
    }

    .chat-groups {
        width: 260px;
        min-width: 180px;
        max-width: 360px;
        background: #2f3136;
        color: #fff;
        padding: 0;
        overflow-y: auto;
        border: none;
        border-radius: 0;
        height: 100vh;
    }

        .chat-groups ul {
            list-style: none;
            padding: 0;
            margin: 0;
        }

        .chat-groups li {
            padding: 12px 24px;
            cursor: pointer;
            border-left: 4px solid transparent;
        }

            .chat-groups li:hover, .chat-groups li.active {
                background: #36393f;
                border-left: 4px solid #5865f2;
            }

    .chat-main {
        flex: 1;
        display: flex;
        flex-direction: column;
        background: #36393f;
        height: 100vh;
        border: none;
        border-radius: 0;
    }

    .messages-list {
        flex: 1;
        overflow-y: auto;
        padding: 24px;
        color: #fff;
    }

    .message {
        margin-bottom: 12px;
    }

        .message.me {
            text-align: right;
        }

        .message .time {
            color: #bbb;
            font-size: 0.8em;
            margin-left: 8px;
        }

    .chat-input {
        padding: 16px;
        background: #23272a;
        display: flex;
        border: none;
    }

        .chat-input input {
            flex: 1;
            border: none;
            border-radius: 8px;
            padding: 10px;
            margin-right: 8px;
        }

        .chat-input button {
            background: #5865f2;
            color: #fff;
            border: none;
            border-radius: 8px;
            padding: 10px 18px;
        }

</style>
<div class="chat-container">
    <div class="chat-groups">
        <ul id="groupList">
            <!-- Gruppenchats werden hier geladen -->
        </ul>
    </div>
    <div class="chat-main">
        <div id="messages" class="messages-list"></div>
        <div class="chat-input">
            <input type="text" id="messageInput" placeholder="Nachricht eingeben..." autocomplete="off" />
            <button id="sendBtn">Senden</button>
        </div>
    </div>
</div>
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
<script>
        let selectedGroupId = null;
    let userId = "<%= UserId %>"; // Setzen vom Backend
    let userName = "<%= UserName %>"; // Setzen vom Backend

    const groupList = document.getElementById("groupList");
    const messagesDiv = document.getElementById("messages");
    const messageInput = document.getElementById("messageInput");
    const sendBtn = document.getElementById("sendBtn");

    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/chathub")
        .build();

    async function loadGroups() {
        // Hier UserId ersetzen!
        const res = await fetch(`/api/ChatGroup/my?userId=${userId}`);
        const groups = await res.json();
        groupList.innerHTML = "";
        groups.forEach(g => {
            const li = document.createElement("li");
            li.textContent = g.name;
            li.onclick = () => selectGroup(g.id);
            groupList.appendChild(li);
        });
    }
    async function loadMessages(groupId) {
        const res = await fetch(`/api/Chat/messages?groupId=${groupId}`);
        const msgs = await res.json();
        messagesDiv.innerHTML = "";
        msgs.forEach(m => {
            const div = document.createElement("div");
            div.className = m.senderId === userId ? "message me" : "message";
            div.innerHTML = `<b>${m.senderName}</b>: ${m.message} <span class='time'>${(new Date(m.sentAt)).toLocaleTimeString()}</span>`;
            messagesDiv.appendChild(div);
        });
        messagesDiv.scrollTop = messagesDiv.scrollHeight;
    }

    async function selectGroup(groupId) {
        selectedGroupId = groupId;
        await connection.invoke("JoinGroup", groupId);
        await loadMessages(groupId);
    }

    sendBtn.onclick = async () => {
        if (!selectedGroupId || !messageInput.value.trim()) return;
        await connection.invoke("SendMessageToGroup", selectedGroupId, userId, userName, messageInput.value);
        messageInput.value = "";
    };

    connection.on("ReceiveMessage", (msg) => {
        if (msg.groupId !== selectedGroupId) return;
        const div = document.createElement("div");
        div.className = msg.senderId === userId ? "message me" : "message";
        div.innerHTML = `<b>${msg.senderName}</b>: ${msg.message} <span class='time'>${(new Date(msg.sentAt)).toLocaleTimeString()}</span>`;
        messagesDiv.appendChild(div);
        messagesDiv.scrollTop = messagesDiv.scrollHeight;
    });

    connection.start().then(loadGroups);

    // Optional: Direkt ersten Chat auswählen
    // .then(() => { if(groupList.firstChild) groupList.firstChild.click(); });

</script>