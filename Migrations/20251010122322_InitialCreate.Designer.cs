// <auto-generated />
using System;
using DmsProjeckt.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DmsProjeckt.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251010122322_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DmsProjeckt.Data.Abteilung", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Abteilungen");
                });

            modelBuilder.Entity("DmsProjeckt.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("AbteilungId")
                        .HasColumnType("int");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("AdminId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedByAdminId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirmenName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Geburtsdatum")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Nachname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilbildUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SignaturePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Vorname")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AbteilungId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("DmsProjeckt.Data.Archive", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ArchivDatum")
                        .HasColumnType("datetime2");

                    b.Property<string>("ArchivName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArchivPfad")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BenutzerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DokumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("FileSizeBytes")
                        .HasColumnType("bigint");

                    b.Property<string>("Grund")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IstAktiv")
                        .HasColumnType("bit");

                    b.Property<string>("MetadatenJson")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DokumentId");

                    b.ToTable("Archive");
                });

            modelBuilder.Entity("DmsProjeckt.Data.AuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Aktion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BenutzerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("DokumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Zeitstempel")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BenutzerId");

                    b.HasIndex("DokumentId");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("DmsProjeckt.Data.AuditLogAdmin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdminId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TargetUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("AuditLogAdmins");
                });

            modelBuilder.Entity("DmsProjeckt.Data.AuditLogDokument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Aktion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BenutzerId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Details")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid>("DokumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Zeitstempel")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DokumentId");

                    b.ToTable("AuditLogDokumente");
                });

            modelBuilder.Entity("DmsProjeckt.Data.Aufgaben", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Aktiv")
                        .HasColumnType("bit");

                    b.Property<string>("Beschreibung")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Erledigt")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ErstelltAm")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FaelligBis")
                        .HasColumnType("datetime2");

                    b.Property<string>("FuerUser")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Prioritaet")
                        .HasColumnType("int");

                    b.Property<int?>("StepId")
                        .HasColumnType("int");

                    b.Property<string>("Titel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VonUser")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("WorkflowId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FuerUser");

                    b.HasIndex("StepId");

                    b.HasIndex("VonUser");

                    b.HasIndex("WorkflowId");

                    b.ToTable("Aufgaben");
                });

            modelBuilder.Entity("DmsProjeckt.Data.BenutzerMetadaten", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DokumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ErzeugtAm")
                        .HasColumnType("datetime2");

                    b.Property<string>("Key")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Value")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("DokumentId");

                    b.ToTable("BenutzerMetadaten");
                });

            modelBuilder.Entity("DmsProjeckt.Data.ChatGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AvatarUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ChatGroups");
                });

            modelBuilder.Entity("DmsProjeckt.Data.ChatGroupMember", b =>
                {
                    b.Property<int>("ChatGroupId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ChatGroupId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("ChatGroupMembers");
                });

            modelBuilder.Entity("DmsProjeckt.Data.ChatMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReceiverId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("DmsProjeckt.Data.DashboardItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActionLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Beschreibung")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CssClass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DashboardItem");
                });

            modelBuilder.Entity("DmsProjeckt.Data.DokumentIndex", b =>
                {
                    b.Property<Guid>("DokumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AbsenderAdresse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Adresse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnsprechPartner")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ArtikelAnzahl")
                        .HasColumnType("int");

                    b.Property<string>("Autor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BIC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bankverbindung")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Beschreibung")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Betreff")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dateiname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ErkannteKategorie")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Faelligkeitsdatum")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirmenName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Gesamtbetrag")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("IBAN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Kategorie")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Kundenname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Kundennummer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Lieferdatum")
                        .HasColumnType("datetime2");

                    b.Property<string>("Metadaten")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Nettobetrag")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("OCRText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ObjectPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Rechnungsbetrag")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("Rechnungsdatum")
                        .HasColumnType("datetime2");

                    b.Property<string>("Rechnungsnummer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Schluesselwoerter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SteuerNr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Steuerbetrag")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Tags")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Titel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UIDNummer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Zahlungsbedingungen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Zeitraum")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lieferart")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DokumentId");

                    b.ToTable("DokumentIndex");
                });

            modelBuilder.Entity("DmsProjeckt.Data.DokumentRechte", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("DokumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("DokumentRechte");
                });

            modelBuilder.Entity("DmsProjeckt.Data.DokumentSignatur", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DokumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Height")
                        .HasColumnType("real");

                    b.Property<string>("ImageBase64")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PageNumber")
                        .HasColumnType("int");

                    b.Property<float>("Width")
                        .HasColumnType("real");

                    b.Property<float>("X")
                        .HasColumnType("real");

                    b.Property<float>("Y")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("DokumentSignatur");
                });

            modelBuilder.Entity("DmsProjeckt.Data.DokumentTags", b =>
                {
                    b.Property<Guid>("DokumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DokumentId", "TagId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("TagId");

                    b.ToTable("DokumentTags");
                });

            modelBuilder.Entity("DmsProjeckt.Data.DokumentVersionen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AbteilungId")
                        .HasColumnType("int");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Dateiname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dateipfad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DokumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("EstSigne")
                        .HasColumnType("bit");

                    b.Property<DateTime>("HochgeladenAm")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVersion")
                        .HasColumnType("bit");

                    b.Property<string>("MetadataJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ObjectPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OriginalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("VersionsLabel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AbteilungId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("DokumentId");

                    b.ToTable("DokumentVersionen");
                });

            modelBuilder.Entity("DmsProjeckt.Data.Dokumente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("AbteilungId")
                        .HasColumnType("int");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("AufgabeId")
                        .HasColumnType("int");

                    b.Property<string>("Beschreibung")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dateiname")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "dateiname");

                    b.Property<string>("Dateipfad")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DokumentStatus")
                        .HasColumnType("int");

                    b.Property<string>("ErkannteKategorie")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("EstSigne")
                        .HasColumnType("bit");

                    b.Property<string>("FileHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("FileSizeBytes")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("HochgeladenAm")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "hochgeladenAm");

                    b.Property<bool?>("IsIndexed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUpdated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVersion")
                        .HasColumnType("bit");

                    b.Property<bool?>("IstFavorit")
                        .HasColumnType("bit");

                    b.Property<string>("Kategorie")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "kategorie");

                    b.Property<int?>("KundeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LetzteAenderung")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MetadatenId")
                        .HasColumnType("int");

                    b.Property<string>("ObjectPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OriginalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("StepId")
                        .HasColumnType("int");

                    b.Property<string>("Titel")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "titel");

                    b.Property<int?>("WorkflowId")
                        .HasColumnType("int");

                    b.Property<int>("dtStatus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AbteilungId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("AufgabeId");

                    b.HasIndex("KundeId");

                    b.ToTable("Dokumente");
                });

            modelBuilder.Entity("DmsProjeckt.Data.DuplicateUpload", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("DokumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DokumentId");

                    b.HasIndex("UserId");

                    b.ToTable("DuplicateUploads");
                });

            modelBuilder.Entity("DmsProjeckt.Data.FolderPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FolderPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("GrantedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("GrantedByAdminId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("GrantedByAdminId");

                    b.HasIndex("UserId");

                    b.ToTable("FolderPermissions");
                });

            modelBuilder.Entity("DmsProjeckt.Data.Kommentare", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BenutzerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DokumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ErstelltAm")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Kommentare");
                });

            modelBuilder.Entity("DmsProjeckt.Data.KundeBenutzer", b =>
                {
                    b.Property<int>("KundenId")
                        .HasColumnType("int");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("KundenId", "ApplicationUserId");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("KundeBenutzer");
                });

            modelBuilder.Entity("DmsProjeckt.Data.Kunden", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Adresse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirmenName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Vorname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Kunden");
                });

            modelBuilder.Entity("DmsProjeckt.Data.MessageRead", b =>
                {
                    b.Property<int>("MessageId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ReadAt")
                        .HasColumnType("datetime2");

                    b.HasKey("MessageId", "UserId");

                    b.ToTable("MessageRead");
                });

            modelBuilder.Entity("DmsProjeckt.Data.Metadaten", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AbsenderAdresse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Adresse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnsprechPartner")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ArtikelAnzahl")
                        .HasColumnType("int");

                    b.Property<string>("BIC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bankverbindung")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Beschreibung")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DokumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Faelligkeitsdatum")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Gesamtpreis")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("IBAN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Kategorie")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Kundennummer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lieferart")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Lieferdatum")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Nettobetrag")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("OCRText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PdfAutor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PdfBetreff")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PdfSchluesselwoerter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Rechnungsbetrag")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("Rechnungsdatum")
                        .HasColumnType("datetime2");

                    b.Property<string>("Rechnungsnummer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SteuerNr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Steuerbetrag")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Stichworte")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Titel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UIDNummer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Zahlungsbedingungen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Zeitraum")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DokumentId")
                        .IsUnique()
                        .HasFilter("[DokumentId] IS NOT NULL");

                    b.ToTable("Metadaten");
                });

            modelBuilder.Entity("DmsProjeckt.Data.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActionLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("NotificationTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NotificationTypeId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("DmsProjeckt.Data.NotificationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("NotificationTypes");
                });

            modelBuilder.Entity("DmsProjeckt.Data.Notiz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Inhalt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LetzteBearbeitung")
                        .HasColumnType("datetime2");

                    b.Property<string>("Titel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notiz");
                });

            modelBuilder.Entity("DmsProjeckt.Data.RecentHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("DokumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("OpenedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DokumentId");

                    b.HasIndex("UserId");

                    b.ToTable("RecentHistory");
                });

            modelBuilder.Entity("DmsProjeckt.Data.SearchHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("DokumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SearchTerm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SearchedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DokumentId");

                    b.ToTable("SearchHistory");
                });

            modelBuilder.Entity("DmsProjeckt.Data.SignatureRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("FileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("RequestedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("RequestedByUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestedUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SignatureRequests");
                });

            modelBuilder.Entity("DmsProjeckt.Data.Step", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Completed")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Kategorie")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<bool>("TaskCreated")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("WorkflowId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("WorkflowId");

                    b.ToTable("Steps");
                });

            modelBuilder.Entity("DmsProjeckt.Data.StepKommentar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("StepId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StepId");

                    b.HasIndex("UserId");

                    b.ToTable("StepKommentare");
                });

            modelBuilder.Entity("DmsProjeckt.Data.Tags", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("DmsProjeckt.Data.UserDashboardItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DashboardItemId")
                        .HasColumnType("int");

                    b.Property<bool>("Favorit")
                        .HasColumnType("bit");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<bool>("Locked")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.Property<int>("X")
                        .HasColumnType("int");

                    b.Property<int>("Y")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DashboardItemId");

                    b.HasIndex("UserId");

                    b.ToTable("UserDashboardItem");
                });

            modelBuilder.Entity("DmsProjeckt.Data.UserFavoritDokument", b =>
                {
                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("DokumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AngelegtAm")
                        .HasColumnType("datetime2");

                    b.HasKey("ApplicationUserId", "DokumentId");

                    b.HasIndex("DokumentId");

                    b.ToTable("UserFavoritDokumente");
                });

            modelBuilder.Entity("DmsProjeckt.Data.UserFavoritNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("HinzugefuegtAm")
                        .HasColumnType("datetime2");

                    b.Property<int>("NotizId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("NotizId");

                    b.HasIndex("UserId");

                    b.ToTable("UserFavoritNote");
                });

            modelBuilder.Entity("DmsProjeckt.Data.UserNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<int>("NotificationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReceivedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("SendAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("NotificationId");

                    b.HasIndex("UserId");

                    b.ToTable("UserNotifications");
                });

            modelBuilder.Entity("DmsProjeckt.Data.UserNotificationSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AdvanceMinutes")
                        .HasColumnType("int");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<int>("NotificationTypeId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("NotificationTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("UserNotificationSettings");
                });

            modelBuilder.Entity("DmsProjeckt.Data.UserSharedDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DokumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SharedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("SharedByUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SharedToUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DokumentId");

                    b.HasIndex("SharedByUserId");

                    b.HasIndex("SharedToUserId");

                    b.ToTable("UserSharedDocuments");
                });

            modelBuilder.Entity("DmsProjeckt.Data.UserSharedNote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("NotizId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SharedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("SharedByUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SharedToUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("NotizId");

                    b.HasIndex("SharedByUserId");

                    b.HasIndex("SharedToUserId");

                    b.ToTable("UserSharedNotes");
                });

            modelBuilder.Entity("DmsProjeckt.Data.Workflow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Workflows");
                });

            modelBuilder.Entity("DokumenteStep", b =>
                {
                    b.Property<Guid>("DokumenteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("StepsId")
                        .HasColumnType("int");

                    b.HasKey("DokumenteId", "StepsId");

                    b.HasIndex("StepsId");

                    b.ToTable("DokumenteStep");
                });

            modelBuilder.Entity("DokumenteWorkflow", b =>
                {
                    b.Property<Guid>("DokumenteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("WorkflowsId")
                        .HasColumnType("int");

                    b.HasKey("DokumenteId", "WorkflowsId");

                    b.HasIndex("WorkflowsId");

                    b.ToTable("DokumenteWorkflow");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DmsProjeckt.Data.ApplicationUser", b =>
                {
                    b.HasOne("DmsProjeckt.Data.Abteilung", "Abteilung")
                        .WithMany()
                        .HasForeignKey("AbteilungId");

                    b.Navigation("Abteilung");
                });

            modelBuilder.Entity("DmsProjeckt.Data.Archive", b =>
                {
                    b.HasOne("DmsProjeckt.Data.Dokumente", "Dokument")
                        .WithMany("Archive")
                        .HasForeignKey("DokumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dokument");
                });

            modelBuilder.Entity("DmsProjeckt.Data.AuditLog", b =>
                {
                    b.HasOne("DmsProjeckt.Data.ApplicationUser", "Benutzer")
                        .WithMany("AuditLogs")
                        .HasForeignKey("BenutzerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DmsProjeckt.Data.Dokumente", "Dokument")
                        .WithMany()
                        .HasForeignKey("DokumentId");

                    b.Navigation("Benutzer");

                    b.Navigation("Dokument");
                });

            modelBuilder.Entity("DmsProjeckt.Data.AuditLogDokument", b =>
                {
                    b.HasOne("DmsProjeckt.Data.Dokumente", "Dokument")
                        .WithMany()
                        .HasForeignKey("DokumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dokument");
                });

            modelBuilder.Entity("DmsProjeckt.Data.Aufgaben", b =>
                {
                    b.HasOne("DmsProjeckt.Data.ApplicationUser", "FuerUserNavigation")
                        .WithMany()
                        .HasForeignKey("FuerUser")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DmsProjeckt.Data.Step", "StepNavigation")
                        .WithMany("Aufgaben")
                        .HasForeignKey("StepId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DmsProjeckt.Data.ApplicationUser", "VonUserNavigation")
                        .WithMany()
                        .HasForeignKey("VonUser")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DmsProjeckt.Data.Workflow", "Workflow")
                        .WithMany()
                        .HasForeignKey("WorkflowId");

                    b.Navigation("FuerUserNavigation");

                    b.Navigation("StepNavigation");

                    b.Navigation("VonUserNavigation");

                    b.Navigation("Workflow");
                });

            modelBuilder.Entity("DmsProjeckt.Data.BenutzerMetadaten", b =>
                {
                    b.HasOne("DmsProjeckt.Data.Dokumente", "Dokument")
                        .WithMany("BenutzerMetadaten")
                        .HasForeignKey("DokumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dokument");
                });

            modelBuilder.Entity("DmsProjeckt.Data.ChatGroupMember", b =>
                {
                    b.HasOne("DmsProjeckt.Data.ChatGroup", "ChatGroup")
                        .WithMany("ChatGroupMembers")
                        .HasForeignKey("ChatGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DmsProjeckt.Data.ApplicationUser", "User")
                        .WithMany("ChatGroupMembers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatGroup");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DmsProjeckt.Data.DokumentRechte", b =>
                {
                    b.HasOne("DmsProjeckt.Data.ApplicationUser", null)
                        .WithMany("DokumentRechte")
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("DmsProjeckt.Data.DokumentTags", b =>
                {
                    b.HasOne("DmsProjeckt.Data.ApplicationUser", null)
                        .WithMany("DokumentTags")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("DmsProjeckt.Data.Dokumente", "Dokument")
                        .WithMany("DokumentTags")
                        .HasForeignKey("DokumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DmsProjeckt.Data.Tags", "Tag")
                        .WithMany("DokumentTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dokument");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("DmsProjeckt.Data.DokumentVersionen", b =>
                {
                    b.HasOne("DmsProjeckt.Data.Abteilung", "Abteilung")
                        .WithMany()
                        .HasForeignKey("AbteilungId");

                    b.HasOne("DmsProjeckt.Data.ApplicationUser", "ApplicationUser")
                        .WithMany("DokumentVersionen")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DmsProjeckt.Data.Dokumente", "Dokument")
                        .WithMany("Versionen")
                        .HasForeignKey("DokumentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Abteilung");

                    b.Navigation("ApplicationUser");

                    b.Navigation("Dokument");
                });

            modelBuilder.Entity("DmsProjeckt.Data.Dokumente", b =>
                {
                    b.HasOne("DmsProjeckt.Data.Abteilung", "Abteilung")
                        .WithMany("Dokumente")
                        .HasForeignKey("AbteilungId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("DmsProjeckt.Data.ApplicationUser", "ApplicationUser")
                        .WithMany("Dokumente")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DmsProjeckt.Data.Aufgaben", "Aufgabe")
                        .WithMany("Dateien")
                        .HasForeignKey("AufgabeId");

                    b.HasOne("DmsProjeckt.Data.Kunden", "Kunde")
                        .WithMany("Dokumente")
                        .HasForeignKey("KundeId");

                    b.Navigation("Abteilung");

                    b.Navigation("ApplicationUser");

                    b.Navigation("Aufgabe");

                    b.Navigation("Kunde");
                });

            modelBuilder.Entity("DmsProjeckt.Data.DuplicateUpload", b =>
                {
                    b.HasOne("DmsProjeckt.Data.Dokumente", "Dokument")
                        .WithMany()
                        .HasForeignKey("DokumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DmsProjeckt.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dokument");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DmsProjeckt.Data.FolderPermission", b =>
                {
                    b.HasOne("DmsProjeckt.Data.ApplicationUser", "GrantedByAdmin")
                        .WithMany()
                        .HasForeignKey("GrantedByAdminId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DmsProjeckt.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GrantedByAdmin");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DmsProjeckt.Data.Kommentare", b =>
                {
                    b.HasOne("DmsProjeckt.Data.ApplicationUser", null)
                        .WithMany("Kommentare")
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("DmsProjeckt.Data.KundeBenutzer", b =>
                {
                    b.HasOne("DmsProjeckt.Data.ApplicationUser", "ApplicationUser")
                        .WithMany("KundenVerbindungen")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DmsProjeckt.Data.Kunden", "Kunden")
                        .WithMany("KundeBenutzer")
                        .HasForeignKey("KundenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Kunden");
                });

            modelBuilder.Entity("DmsProjeckt.Data.Kunden", b =>
                {
                    b.HasOne("DmsProjeckt.Data.ApplicationUser", "ApplicationUser")
                        .WithMany("Kunden")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("DmsProjeckt.Data.MessageRead", b =>
                {
                    b.HasOne("DmsProjeckt.Data.ChatMessage", "Message")
                        .WithMany()
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Message");
                });

            modelBuilder.Entity("DmsProjeckt.Data.Metadaten", b =>
                {
                    b.HasOne("DmsProjeckt.Data.Dokumente", "Dokument")
                        .WithOne("MetadatenObjekt")
                        .HasForeignKey("DmsProjeckt.Data.Metadaten", "DokumentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Dokument");
                });

            modelBuilder.Entity("DmsProjeckt.Data.Notification", b =>
                {
                    b.HasOne("DmsProjeckt.Data.NotificationType", "NotificationType")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NotificationType");
                });

            modelBuilder.Entity("DmsProjeckt.Data.Notiz", b =>
                {
                    b.HasOne("DmsProjeckt.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DmsProjeckt.Data.RecentHistory", b =>
                {
                    b.HasOne("DmsProjeckt.Data.Dokumente", "Dokument")
                        .WithMany()
                        .HasForeignKey("DokumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DmsProjeckt.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dokument");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DmsProjeckt.Data.SearchHistory", b =>
                {
                    b.HasOne("DmsProjeckt.Data.Dokumente", "Dokument")
                        .WithMany()
                        .HasForeignKey("DokumentId");

                    b.Navigation("Dokument");
                });

            modelBuilder.Entity("DmsProjeckt.Data.Step", b =>
                {
                    b.HasOne("DmsProjeckt.Data.ApplicationUser", "AssignedToUser")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.HasOne("DmsProjeckt.Data.Workflow", "Workflow")
                        .WithMany("Steps")
                        .HasForeignKey("WorkflowId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("AssignedToUser");

                    b.Navigation("Workflow");
                });

            modelBuilder.Entity("DmsProjeckt.Data.StepKommentar", b =>
                {
                    b.HasOne("DmsProjeckt.Data.Step", "Step")
                        .WithMany("Kommentare")
                        .HasForeignKey("StepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DmsProjeckt.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Step");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DmsProjeckt.Data.Tags", b =>
                {
                    b.HasOne("DmsProjeckt.Data.ApplicationUser", null)
                        .WithMany("Tags")
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("DmsProjeckt.Data.UserDashboardItem", b =>
                {
                    b.HasOne("DmsProjeckt.Data.DashboardItem", "DashboardItem")
                        .WithMany("UserDashboardItems")
                        .HasForeignKey("DashboardItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DmsProjeckt.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DashboardItem");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DmsProjeckt.Data.UserFavoritDokument", b =>
                {
                    b.HasOne("DmsProjeckt.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DmsProjeckt.Data.Dokumente", "Dokument")
                        .WithMany()
                        .HasForeignKey("DokumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Dokument");
                });

            modelBuilder.Entity("DmsProjeckt.Data.UserFavoritNote", b =>
                {
                    b.HasOne("DmsProjeckt.Data.Notiz", "Notiz")
                        .WithMany()
                        .HasForeignKey("NotizId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DmsProjeckt.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Notiz");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DmsProjeckt.Data.UserNotification", b =>
                {
                    b.HasOne("DmsProjeckt.Data.Notification", "Notification")
                        .WithMany("UserNotifications")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DmsProjeckt.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Notification");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DmsProjeckt.Data.UserNotificationSetting", b =>
                {
                    b.HasOne("DmsProjeckt.Data.NotificationType", "NotificationType")
                        .WithMany("UserNotificationSettings")
                        .HasForeignKey("NotificationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DmsProjeckt.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NotificationType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DmsProjeckt.Data.UserSharedDocument", b =>
                {
                    b.HasOne("DmsProjeckt.Data.Dokumente", "Dokument")
                        .WithMany()
                        .HasForeignKey("DokumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DmsProjeckt.Data.ApplicationUser", "SharedByUser")
                        .WithMany()
                        .HasForeignKey("SharedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DmsProjeckt.Data.ApplicationUser", "SharedToUser")
                        .WithMany()
                        .HasForeignKey("SharedToUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Dokument");

                    b.Navigation("SharedByUser");

                    b.Navigation("SharedToUser");
                });

            modelBuilder.Entity("DmsProjeckt.Data.UserSharedNote", b =>
                {
                    b.HasOne("DmsProjeckt.Data.Notiz", "Notiz")
                        .WithMany()
                        .HasForeignKey("NotizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DmsProjeckt.Data.ApplicationUser", "SharedByUser")
                        .WithMany()
                        .HasForeignKey("SharedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DmsProjeckt.Data.ApplicationUser", "SharedToUser")
                        .WithMany()
                        .HasForeignKey("SharedToUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Notiz");

                    b.Navigation("SharedByUser");

                    b.Navigation("SharedToUser");
                });

            modelBuilder.Entity("DmsProjeckt.Data.Workflow", b =>
                {
                    b.HasOne("DmsProjeckt.Data.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("DokumenteStep", b =>
                {
                    b.HasOne("DmsProjeckt.Data.Dokumente", null)
                        .WithMany()
                        .HasForeignKey("DokumenteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DmsProjeckt.Data.Step", null)
                        .WithMany()
                        .HasForeignKey("StepsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DokumenteWorkflow", b =>
                {
                    b.HasOne("DmsProjeckt.Data.Dokumente", null)
                        .WithMany()
                        .HasForeignKey("DokumenteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DmsProjeckt.Data.Workflow", null)
                        .WithMany()
                        .HasForeignKey("WorkflowsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DmsProjeckt.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DmsProjeckt.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DmsProjeckt.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DmsProjeckt.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DmsProjeckt.Data.Abteilung", b =>
                {
                    b.Navigation("Dokumente");
                });

            modelBuilder.Entity("DmsProjeckt.Data.ApplicationUser", b =>
                {
                    b.Navigation("AuditLogs");

                    b.Navigation("ChatGroupMembers");

                    b.Navigation("DokumentRechte");

                    b.Navigation("DokumentTags");

                    b.Navigation("DokumentVersionen");

                    b.Navigation("Dokumente");

                    b.Navigation("Kommentare");

                    b.Navigation("Kunden");

                    b.Navigation("KundenVerbindungen");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("DmsProjeckt.Data.Aufgaben", b =>
                {
                    b.Navigation("Dateien");
                });

            modelBuilder.Entity("DmsProjeckt.Data.ChatGroup", b =>
                {
                    b.Navigation("ChatGroupMembers");
                });

            modelBuilder.Entity("DmsProjeckt.Data.DashboardItem", b =>
                {
                    b.Navigation("UserDashboardItems");
                });

            modelBuilder.Entity("DmsProjeckt.Data.Dokumente", b =>
                {
                    b.Navigation("Archive");

                    b.Navigation("BenutzerMetadaten");

                    b.Navigation("DokumentTags");

                    b.Navigation("MetadatenObjekt");

                    b.Navigation("Versionen");
                });

            modelBuilder.Entity("DmsProjeckt.Data.Kunden", b =>
                {
                    b.Navigation("Dokumente");

                    b.Navigation("KundeBenutzer");
                });

            modelBuilder.Entity("DmsProjeckt.Data.Notification", b =>
                {
                    b.Navigation("UserNotifications");
                });

            modelBuilder.Entity("DmsProjeckt.Data.NotificationType", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("UserNotificationSettings");
                });

            modelBuilder.Entity("DmsProjeckt.Data.Step", b =>
                {
                    b.Navigation("Aufgaben");

                    b.Navigation("Kommentare");
                });

            modelBuilder.Entity("DmsProjeckt.Data.Tags", b =>
                {
                    b.Navigation("DokumentTags");
                });

            modelBuilder.Entity("DmsProjeckt.Data.Workflow", b =>
                {
                    b.Navigation("Steps");
                });
#pragma warning restore 612, 618
        }
    }
}
